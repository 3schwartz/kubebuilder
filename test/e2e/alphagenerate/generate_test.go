/*
Copyright 2023 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package alphagenerate

import (
	"fmt"
	"path/filepath"

	pluginutil "sigs.k8s.io/kubebuilder/v3/pkg/plugin/util"

	. "github.com/onsi/ginkgo/v2"
	. "github.com/onsi/gomega"

	"sigs.k8s.io/kubebuilder/v3/test/e2e/utils"
)

var _ = Describe("kubebuilder", func() {
	Context("alpha generate ", func() {
		var (
			kbc *utils.TestContext
		)

		BeforeEach(func() {
			var err error
			kbc, err = utils.NewTestContext(pluginutil.KubebuilderBinName, "GO111MODULE=on")
			Expect(err).NotTo(HaveOccurred())
			Expect(kbc.Prepare()).To(Succeed())
		})

		AfterEach(func() {
			kbc.Destroy()
		})

		It("should regenerate the project with success", func() {
			ReGenerateProject(kbc)
		})

	})
})

// ReGenerateProject implements a project that is regenerated by kubebuilder.
func ReGenerateProject(kbc *utils.TestContext) {
	var err error

	By("initializing a project")
	err = kbc.Init(
		"--plugins", "go/v4",
		"--project-version", "3",
		"--domain", kbc.Domain,
	)
	ExpectWithOffset(1, err).NotTo(HaveOccurred())

	By("regenerating the project")
	err = kbc.Regenerate(
		"--input-dir", kbc.Dir,
		"--output-dir", filepath.Join(kbc.Dir, "testdir"),
	)
	ExpectWithOffset(1, err).NotTo(HaveOccurred())

	By("checking if the project file was generated with the expected layout")
	var layout = `layout:
- go.kubebuilder.io/v4
`
	fileContainsExpr, err := pluginutil.HasFileContentWith(
		filepath.Join(kbc.Dir, "testdir", "PROJECT"), layout)
	ExpectWithOffset(1, err).NotTo(HaveOccurred())
	ExpectWithOffset(1, fileContainsExpr).To(BeTrue())

	By("checking if the project file was generated with the expected domain")
	var domain = fmt.Sprintf("domain: %s", kbc.Domain)
	fileContainsExpr, err = pluginutil.HasFileContentWith(
		filepath.Join(kbc.Dir, "testdir", "PROJECT"), domain)
	ExpectWithOffset(1, err).NotTo(HaveOccurred())
	ExpectWithOffset(1, fileContainsExpr).To(BeTrue())

	By("checking if the project file was generated with the expected version")
	var version = `version: "3"`
	fileContainsExpr, err = pluginutil.HasFileContentWith(
		filepath.Join(kbc.Dir, "testdir", "PROJECT"), version)
	ExpectWithOffset(1, err).NotTo(HaveOccurred())
	ExpectWithOffset(1, fileContainsExpr).To(BeTrue())
}
